trigger:
  branches:
    include:
    - develop
    - refs/pull/*
  tags:
    include:
      - v*

variables:
  buildConfiguration: 'Release'
  netCoreSdk: '3.1.401'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

jobs:
  - job: 'build_lin'
    displayName: "[Linux] Build & Test"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UseDotNet@2
        displayName: "Get .NET SDK"
        inputs:
          packageType: 'sdk'
          version: '$(netCoreSdk)'

      - script: |
          dotnet tool restore
          dotnet cake --bootstrap
        displayName: "Install build tools"

      - script: dotnet cake --target=Stage-Artifacts --configuration=$(buildConfiguration) --verbosity=diagnostic
        displayName: "Build, test and stage artifacts"

      - task: PublishTestResults@2
        displayName: "Publish test results"
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'test_results'
          failTaskOnFailedTests: true
          publishRunAttachments: false

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'test_results/coverage/Cobertura.xml'
          failIfCoverageEmpty: true

      # We copy the artifacts as we can't specify filters in the publish task
      - task: CopyFiles@2
        displayName: "Prepare artifacts"
          inputs:
            sourceFolder: 'artifacts'
            contents: |
              *.zip
              *.nupkg
              *.snupkg
              _site/**
            targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'artifacts'
          publishLocation: 'Container'

  - job: 'build_mac'
    displayName: "[MacOS] Build & Test"
    pool:
      vmImage: 'macOs-latest'
    steps:
      - task: UseDotNet@2
        displayName: "Get .NET SDK"
        inputs:
          packageType: 'sdk'
          version: '$(netCoreSdk)'

      - script: |
          dotnet tool restore
          dotnet cake --bootstrap
        displayName: "Install build tools"

      - script: dotnet cake --target=BuildTest --configuration=$(buildConfiguration) --verbosity=diagnostic
        displayName: "Build & test"

      - task: PublishTestResults@2
        displayName: "Publish test results"
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'test_results'
          failTaskOnFailedTests: true
          publishRunAttachments: false

  - job: 'build_win'
    displayName: "[Windows] Build & Test"
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: UseDotNet@2
        displayName: "Get .NET SDK"
        inputs:
          packageType: 'sdk'
          version: '$(netCoreSdk)'

      - script: |
          dotnet tool restore
          dotnet cake --bootstrap
        displayName: "Install build tools"

      - script: dotnet cake --target="BuildTest" --configuration=$(buildConfiguration) --verbosity=diagnostic
        displayName: "Build & test"

      - task: PublishTestResults@2
        displayName: "Publish test results"
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'test_results'
          failTaskOnFailedTests: true
          publishRunAttachments: false

  - job: 'preview_release'
    displayName: 'Publish preview release'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: ['build_win', 'build_lin', 'build_mac']
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))"
    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Get build artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'artifacts'
          downloadPath: '$(Build.ArtifactStagingDirectory)'
